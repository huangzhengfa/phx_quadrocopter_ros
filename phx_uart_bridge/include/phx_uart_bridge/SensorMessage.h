/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/ic3/Documents/ros-ws/src/phx_uart_bridge/msg/SensorMessage.msg
 *
 */


#ifndef PHX_UART_BRIDGE_MESSAGE_SENSORMESSAGE_H
#define PHX_UART_BRIDGE_MESSAGE_SENSORMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace phx_uart_bridge
{
template <class ContainerAllocator>
struct SensorMessage_
{
  typedef SensorMessage_<ContainerAllocator> Type;

  SensorMessage_()
    : radio0(0)
    , radio1(0)
    , radio2(0)
    , radio3(0)
    , accX(0)
    , accY(0)
    , accZ(0)
    , angleSpeedX(0)
    , angleSpeedY(0)
    , angleSpeedZ(0)
    , battery(0)  {
    }
  SensorMessage_(const ContainerAllocator& _alloc)
    : radio0(0)
    , radio1(0)
    , radio2(0)
    , radio3(0)
    , accX(0)
    , accY(0)
    , accZ(0)
    , angleSpeedX(0)
    , angleSpeedY(0)
    , angleSpeedZ(0)
    , battery(0)  {
    }



   typedef int16_t _radio0_type;
  _radio0_type radio0;

   typedef int16_t _radio1_type;
  _radio1_type radio1;

   typedef int16_t _radio2_type;
  _radio2_type radio2;

   typedef int16_t _radio3_type;
  _radio3_type radio3;

   typedef int16_t _accX_type;
  _accX_type accX;

   typedef int16_t _accY_type;
  _accY_type accY;

   typedef int16_t _accZ_type;
  _accZ_type accZ;

   typedef int16_t _angleSpeedX_type;
  _angleSpeedX_type angleSpeedX;

   typedef int16_t _angleSpeedY_type;
  _angleSpeedY_type angleSpeedY;

   typedef int16_t _angleSpeedZ_type;
  _angleSpeedZ_type angleSpeedZ;

   typedef int16_t _battery_type;
  _battery_type battery;




  typedef boost::shared_ptr< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> const> ConstPtr;

}; // struct SensorMessage_

typedef ::phx_uart_bridge::SensorMessage_<std::allocator<void> > SensorMessage;

typedef boost::shared_ptr< ::phx_uart_bridge::SensorMessage > SensorMessagePtr;
typedef boost::shared_ptr< ::phx_uart_bridge::SensorMessage const> SensorMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phx_uart_bridge::SensorMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace phx_uart_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'phx_uart_bridge': ['/home/ic3/Documents/ros-ws/src/phx_uart_bridge/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87b4ae8827283770d54bb73bdf12258d";
  }

  static const char* value(const ::phx_uart_bridge::SensorMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87b4ae8827283770ULL;
  static const uint64_t static_value2 = 0xd54bb73bdf12258dULL;
};

template<class ContainerAllocator>
struct DataType< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phx_uart_bridge/SensorMessage";
  }

  static const char* value(const ::phx_uart_bridge::SensorMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 radio0\n\
int16 radio1\n\
int16 radio2\n\
int16 radio3\n\
int16 accX\n\
int16 accY\n\
int16 accZ\n\
int16 angleSpeedX\n\
int16 angleSpeedY\n\
int16 angleSpeedZ\n\
int16 battery\n\
";
  }

  static const char* value(const ::phx_uart_bridge::SensorMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radio0);
      stream.next(m.radio1);
      stream.next(m.radio2);
      stream.next(m.radio3);
      stream.next(m.accX);
      stream.next(m.accY);
      stream.next(m.accZ);
      stream.next(m.angleSpeedX);
      stream.next(m.angleSpeedY);
      stream.next(m.angleSpeedZ);
      stream.next(m.battery);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SensorMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phx_uart_bridge::SensorMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phx_uart_bridge::SensorMessage_<ContainerAllocator>& v)
  {
    s << indent << "radio0: ";
    Printer<int16_t>::stream(s, indent + "  ", v.radio0);
    s << indent << "radio1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.radio1);
    s << indent << "radio2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.radio2);
    s << indent << "radio3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.radio3);
    s << indent << "accX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accX);
    s << indent << "accY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accY);
    s << indent << "accZ: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accZ);
    s << indent << "angleSpeedX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angleSpeedX);
    s << indent << "angleSpeedY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angleSpeedY);
    s << indent << "angleSpeedZ: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angleSpeedZ);
    s << indent << "battery: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHX_UART_BRIDGE_MESSAGE_SENSORMESSAGE_H
